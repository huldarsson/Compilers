%{
  import java.io.*;
  import java.util.*;
%}
%token <sval> LITERAL, NAME, OPNAME1, OPNAME2, OPNAME3, OPNAME4, OPNAME5, OPNAME6, OPNAME7
%token WHILE, IF, ELSIF, ELSE, RETURN ,OPNAME_AND, OPNAME_OR, OPNAME_NOT, VAR, EOF
%type <obj> program, function, args, nonemptyargs, expressions, expr, binopexpr, op, orexpr, andexpr, notexpr, smallexpr, ifexpr, elsif, body
%type <ival> decl, declarations, names
%left OPNAME1, OPNAME3, OPNAME4, OPNAME5, OPNAME6, OPNAME7
%right OPNAME2

%%

start : program { generateProgram(name, ((Vector<Object>)($1)).toArray()); }
      ;



program : program function { ((Vector<Object>)($1)).add($2); $$ = $1; }
        | function         { $$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
        ;



function :
          {
            varCount = 0;
            varTable = new HashMap<String, Integer>();
          }
           NAME '(' names ')' '{' declarations expressions '}' {$$ = new Object[]{$2, $4, $7, ((Vector<Object>)($8)).toArray()}; }
         ;



names : names ',' NAME  {addVar($3); $$ = $1 + 1; }
     | NAME             {addVar($1); $$ = $$ + 1; }
     |                  {$$ = 0; }
     ;


declarations : declarations decl ';' { $$ = $1 + $2; }
             |                { $$ = 0; }
             ;



decl : decl ',' NAME     { addVar($3); $$ = $1 + 1; }
     | VAR NAME          { addVar($2); $$ = 1; }
     ;



expressions : expressions expr ';'  {$$ = $1; ((Vector<Object>)($$)).add($2); }
            |                      { $$ = new Vector<Object>(); }
            ;



expr : RETURN orexpr  { $$ = new Object[]{"RETURN", $2}; }
     | NAME '=' expr  { $$ = new Object[]{"STORE", findVar($1), $3}; }
     | orexpr         { $$ = $1; }
     ;



orexpr : andexpr OPNAME_OR orexpr { $$ = new Object[]{"OR", $1, $3}; }
       | andexpr                  { $$ = $1; }
       ;

      

andexpr : notexpr OPNAME_AND andexpr {$$ = new Object[]{"AND", $1, $3}; }
        | notexpr                    {$$ = $1; }
        ;



notexpr : OPNAME_NOT notexpr { $$ = new Object[]{"NOT", $2}; }
        | binopexpr          { $$ = $1; }
        ;


/*
binopexpr1 : binopexpr1 OPNAME1 binopexpr2
           | binopexpr2




binopexpr2 : binopexpr3 OPNAME2 binopexpr2
           | binopexpr3 
           ;



binopexpr3 : binopexpr3 OPNAME3 binopexpr4
           | binopexpr4
           ;




binopexpr4 : binopexpr4 OPNAME4 binopexpr5
           | binopexpr5
           ;




binopexpr5 : binopexpr5 OPNAME5 binopexpr6
           | binopexpr6
           ;



binopexpr6 : binopexpr6 OPNAME6 binopexpr7
           | binopexpr7
           ;



binopexpr7 : binopexpr7 OPNAME7 smallexpr
           | smallexpr
           ;

*/
           
           
           /*E√êA*/

binopexpr : binopexpr OPNAME2 binopexpr { $$ = new Object[]{"CALL", $2, new Object[]{$1, $3}}; }
            | binopexpr op smallexpr { $$ = new Object[]{"CALL", $2, new Object[]{$1, $3}}; }
          | smallexpr              { $$ = $1; }
          ;


op : OPNAME1 {$$ = $1;}
   /*| OPNAME2 {$$ = $1;}*/
   | OPNAME3 {$$ = $1;}
   | OPNAME4 {$$ = $1;}
   | OPNAME5 {$$ = $1;}
   | OPNAME6 {$$ = $1;}
   | OPNAME7 {$$ = $1;}
   ;



smallexpr : NAME                     { $$ = new Object[]{"FETCH", findVar($1)};}
          | NAME '(' args ')'        { $$ = new Object[]{"CALL", $1, ((Vector<Object>)($3)).toArray()}; }
          | WHILE '(' expr ')' body  { $$ = new Object[]{"WHILE", $3, $5}; }
          | ifexpr                   { $$ = $1; }
          | LITERAL                  { $$ = new Object[]{"LITERAL", $1}; }
          | op smallexpr             { $$ = new Object[]{"CALL", $1, new Object[]{$2}}; }
          | '(' expr ')'             { $$ = $2; }
          ;



args : nonemptyargs  { $$ = $1; }
     |               { $$ = new Vector<Object>(); }
     ;



nonemptyargs : nonemptyargs ',' expr  { ((Vector<Object>)($1)).add($3); $$ = $1;}
             | expr                   { $$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
             ;



ifexpr : IF '(' expr ')' body elsif { $$ = new Object[]{"IF", $3, $5, $6}; }
       ;



elsif : ELSIF '(' expr ')' body elsif {$$ = new Object[]{"IF", $3, $5, $6}; }
      | ELSE body                     {$$ = $2;}
      |                               { $$ = null; }
      ;                             






body : '{' expressions '}' { $$ = new Object[]{"BODY", ((Vector<Object>)($2)).toArray()}; }


%%

private static NanoMorphoLexer lexer;
private static int varCount;
private static HashMap<String,Integer> varTable;
private static String name;
private static PrintWriter writer;


private int yylex()
{
	int yyl_return = -1;
	try
	{
		yylval = new NanoMorphoParserVal(0);
		yyl_return = lexer.yylex();
	}
	catch (IOException e)
	{
		System.err.println("IO error: "+e);
	}
	return yyl_return;
}

static void yyerror( String error )
{	
	System.err.println("Error:  "+error);
	System.err.println("Lexeme: "+lexer.yytext());
	System.err.println("Line: "+lexer.getLine());
	System.err.println("Column: "+lexer.getColumn());
	System.exit(1);
}

public NanoMorphoParser( Reader r )
{
	lexer = new NanoMorphoLexer(r,this);
}

public static void main( String args[] ) throws IOException
{
        NanoMorphoParser yyparser = new NanoMorphoParser(new FileReader(args[0]));
        name = args[0].substring(0,args[0].lastIndexOf('.'));

        writer = new PrintWriter(name+".masm", "UTF-8");
        yyparser.yyparse();
        writer.close();
}

static void addVar( String name )
{
  if( varTable.get(name) != null )
    yyerror("Variable already exists");
  varTable.put(name,varCount++);
}

static int findVar( String name )
{
  Integer res = varTable.get(name);
  if( res == null ) 
    yyerror("Variable does not exist");
  return res;
}


static void emit(String line, Object... args) {
  System.out.println(String.format(line, args));
}

static int labelCount = 0;

static int newLabel() {
    labelCount++;
    return labelCount;
}

static void generateJump(Object[] expr, int labTrue, int labFalse) {
    String code = (String) expr[0];
    switch (code) {
        case "LITERAL":
            String literal = (String) expr[1];
            if (literal.equals("false") || literal.equals("null") ) {
                if (labFalse != 0) emit("(Go _%d)", labTrue);
                return;
            }
            if (labTrue != 0) emit("(Go _%d)", labTrue);
            return;
        default:
            generateExpression(expr);
            if (labTrue != 0) emit("(GoTrue _%d)", labTrue);
            if (labFalse !=0) emit("(GoFalse _%d)", labFalse);
    }
}

    public void generateJumpP(Object[] expr, int labTrue, int labFalse) {
        String code = (String) expr[0];
        switch (code) {
            case "LITERAL":
                String literal = (String) expr[1];
                emit("(Push)");
                if (literal.equals("false") || literal.equals("null") ) {
                    if (labFalse != 0) emit("(Go _%d)", labTrue);
                    return;
                }
                if (labTrue != 0) emit("(Go _%d)", labTrue);
                return;
            default:
                generateExpressionP(expr);
                if (labTrue != 0) emit("(GoTrue _%d)", labTrue);
                if (labFalse !=0) emit("(GoFalse _%d)", labFalse);
        }
    }


void generateProgram(String name, Object[] program) {
  // program = {function, ....}
  emit("\"%s.mexe\" = main in", name);
  emit("!{{");
  for (int i = 0; i!= program.length; i++) generateFunction((Object[]) program[i]);
  emit("}}*BASIS;");
}

static void generateFunction(Object[] f) {
  // f = {name, argcount, varcount, expressions}
  String name = (String) f[0];
  int argc = (Integer) f[1];
  int varc = (Integer) f[2];
  Object [] exprs = (Object[]) f[3];
  emit("#\"%s[f%d]\" =", name, argc);
  emit("[");
  if (varc > 0) {
      emit("(MakeVal null)");
      for (int i = 0; i < varc; i++)
          emit("(Push)");
  }
  for(int i = 0; i < exprs.length; i++)
      generateExpression((Object[]) exprs[i]);
  //Expressions
  emit("(Return)"); //Just in case;
  emit("];");
}

static void generateExpression(Object[] expr){
  String code = (String) expr[0];
  switch(code) {
      case "FETCH":
          emit("(Fetch %d)", expr[1]);
          return;
      case "STORE":
          generateExpression((Object []) expr[2]);
          emit("(Store %d)", expr[1]);
          return;
      case "LITERAL":
          emit("(MakeVal %s)", (String) expr[1]);
          return;
      case "IF":
          int labElse = newLabel();
          int labEnd = newLabel();
          generateJump((Object[]) expr[1], 0, labElse);
          generateExpression((Object[]) expr[2]);
          emit("(Go _%s)", labEnd);
          emit("_%d:", labElse);
          if (null != (Object) expr[3]) {
              generateExpression((Object[]) expr[3]);
          }
          emit("_%d:", labEnd);
          return;
      case "WHILE":
          int loopLabel = newLabel();
          int endLabel = newLabel();
          emit("_%d:", loopLabel);
          generateExpression((Object[]) expr[1]);
          emit("(GoFalse _%d)", endLabel);
          generateExpression((Object[]) expr[2]);
          emit("(Go _%d)", loopLabel);
          emit("_%d:", endLabel);
          return;
      case "BODY":
          Object[] exprs = (Object[]) expr[1];
          for (int i = 0; i < exprs.length; i++) {
              generateExpression((Object[]) exprs[i]);
          }
          return;
      case "CALL":
          Object[] args = (Object[]) expr[2];
          for(int i = 0; i < args.length; i++) {
              if(i==0) generateExpression((Object[]) args[i]);
              else generateExpressionP((Object[]) args[i]);
          }
          emit("(Call #\"%s[f%d]\" %d)", expr[1], args.length, args.length);
          return;
      case "RETURN":
          generateExpressionR((Object[]) expr[1]);
          return;
      case "AND":
          int lab = newLabel();
          generateExpression((Object[]) expr[1]);
          emit("(GoFalse _%d)", lab);
          generateExpression((Object[]) expr[2]);
          emit("_%d:", lab);
          return;
      case "OR":
          int lab2 = newLabel();
          generateExpression((Object[]) expr[1]);
          emit("(GoTrue _%d)", lab2);
          generateExpression((Object[]) expr[2]);
          emit("_%d:", lab2);
          return;
      case "NOT":
          generateExpression((Object[]) expr[1]);
          emit("(Not)");
          return;
      default:
          throw new Error(String.format("Unknown command code: %s", code));
  }
}

    static void generateExpressionR(Object[] expr) {
        String code = (String) expr[0];
        switch(code) {
            case "FETCH":
                emit("(FetchR %d)", expr[1]);
                return;
            case "STORE":
                generateExpression((Object []) expr[2]);
                emit("(StoreR %d)", expr[1]);
                return;
            case "LITERAL":
                emit("(MakeValR %s)", (String) expr[1]);
                return;
            case "IF":
                int labElse = newLabel();
                int labEnd = newLabel();
                generateJump((Object[]) expr[1], 0, labElse);
                generateExpressionR((Object[]) expr[2]);
                emit("_%d:", labElse);
                if ((Object) expr[2] != null) {
                    generateExpressionR((Object[]) expr[3]);
                }
                return;
            case "CALL":
                Object[] args = (Object[]) expr[2];
                for(int i = 0; i < args.length; i++) {
                    if(i==0) generateExpression((Object[]) args[i]);
                    else generateExpressionP((Object[]) args[i]);
                }
                emit("(CallR #\"%s[f%d]\" %d)", expr[1], args.length, args.length);
                return;
            default:
                generateExpression(expr);
                emit("(Return)");
                return;
        }
    }

        static void generateExpressionP(Object[] expr) {
        String code = (String) expr[0];
        switch(code) {
            case "FETCH":
                emit("(FetchP %d)", expr[1]);
                return;
            case "STORE":
                generateExpression((Object []) expr[2]);
                emit("(StoreP %d)", expr[1]);
                return;
            case "LITERAL":
                emit("(MakeValP %s)", (String) expr[1]);
                return;
            case "IF":
                int labElse = newLabel();
                int labEnd = newLabel();
                generateJump((Object[]) expr[1], 0, labElse);
                generateExpression((Object[]) expr[2]);
                emit("(Go _%s)", labEnd);
                emit("_%d:", labElse);
                if ((Object) expr[3] != null) {
                    generateExpression((Object[]) expr[3]);
                }
                emit("_%d:", labEnd);
                return;
            case "CALL":
                Object[] args = (Object[]) expr[2];
                for(int i = 0; i < args.length; i++) 
                    generateExpressionP((Object[]) args[i]);
                if (args.length == 0) emit("(Push)");
                emit("(Call #\"%s[f%d]\" %d)", expr[1], args.length, args.length);
                return;
        }
    }






          
           